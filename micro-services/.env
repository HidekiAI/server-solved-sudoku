#!/bin/bash
# NOTE: DO _NOT_ commit this file to the repository IF it contains sensitive information!

GOOGLE_CLIENT_ID=your_google_client_id

GOOGLE_CLIENT_SECRET=your_google_client_secret

# Although Google accepts http, ideally we want https...  This URL
# is what Google instructs client to redirect itself to after
# successful authentication.  This MUST MATCH exactly (all the way
# up to trailing "/" (if exists)) or else you will get a redirect
# failure error from Google!  I'm not sure why it works, but
# using http://localhost seems to work on non-Docker (NAT actually)
# dev hosts...  On Docker-compose based, I think it still works as well
# due to port-forwarding, though I've never been successful with that...
GOOGLE_REDIRECT_URI=http://localhost:8080/auth_callback

export GOOGLE_CLIENT_ID
export GOOGLE_CLIENT_SECRET
export GOOGLE_REDIRECT_URI

# OAuth2 Web Listner
export REST_PORT=8080

# Database connection information, for PostgreSQL we need host:port but for sqlite, all we need is the path to the file
# As for username/passwd for SQL services, it should be at the host access level (i.e. in MySQL, it's via I.P. address)
# I do agree that CIDN-IP-based access is not the most secure, but I do not wish to over-complicate this project (personally
# I think stuffing password in a static file here is worse!)
export DB_HOST=localhost
export DB_PORT=5432
export DB_STORAGE_PATH=./data/tokens.sqlite.db

# Message broker connection information, for RabbitMQ we need host:port but for Redis, all we need is the path to the file
# Kafka: 9092
# RabbitMQ (AMQP): 5672
# Redis: 6379
export BROKER_HOST=localhost
export BROKER_PORT=9092