use std::{env, path::PathBuf};

// Builder to make sure that when `cargo build` is triggered, all the ./protobuf files are
// run through the `tonic_build` tool to generate the necessary code for the server and client.
fn main() {
    // for debugging purposes, ideally it would good to print out the current directory so we know where the paths are relative to:
    println!("\n\nBase directory: '{:?}'", env::current_dir().unwrap());
    let out_dir = PathBuf::from(env::current_dir().unwrap()).join("./src/autogenerated");
    println!("Output directory: '{:?}'", out_dir);
    // have a suspicion that if the output directory does not exist, the build will fail, so mkdir it...
    std::fs::create_dir_all(&out_dir).unwrap(); // it won't panic if dir already exists, so just unwrap it

    tonic_build::configure()
        .out_dir(&out_dir)
        .type_attribute("routeguide.Point", "#[derive(Hash)]")
        .compile(&["./protobuf/sudoku_matrix.proto"], &["./protobuf"])
        .unwrap();

    tonic_build::configure()
        .out_dir(&out_dir)
        //.file_descriptor_set_path(out_dir.join("mydescriptor.bin"))
        .compile(
            &[
                "./protobuf/game.proto",
                "./protobuf/generator.proto",
                "./protobuf/resolver.proto",
                "./protobuf/trainer.proto",
            ],
            &["./protobuf"],
        )
        .unwrap();

    //tonic_build::configure()
    //    .out_dir(&out_dir)
    //    .server_mod_attribute("attrs", "#[cfg(feature = \"server\")]")
    //    .server_attribute("Echo", "#[derive(PartialEq)]")
    //    .client_mod_attribute("attrs", "#[cfg(feature = \"client\")]")
    //    .client_attribute("Echo", "#[derive(PartialEq)]")
    //    .compile(
    //        &[
    //            "./protobuf/echo/echo.proto",
    //            "./protobuf/unaryecho/echo.proto",
    //        ],
    //        &["./protobuf"],
    //    )
    //    .unwrap();
}

// Manually define the json.helloworld.Greeter service which used a custom JsonCodec to use json
// serialization instead of ./protobuf for sending messages on the wire.
// This will result in generated client and server code which relies on its request, response and
// codec types being defined in a module `crate::common`.
//
// See the client/server examples defined in `src/json-codec` for more information.
//fn build_json_codec_service() {
//    let greeter_service = tonic_build::manual::Service::builder()
//        .name("Greeter")
//        .package("json.helloworld")
//        .method(
//            tonic_build::manual::Method::builder()
//                .name("say_hello")
//                .route_name("SayHello")
//                .input_type("crate::common::HelloRequest")
//                .output_type("crate::common::HelloResponse")
//                .codec_path("crate::common::JsonCodec")
//                .build(),
//        )
//        .build();
//
//    tonic_build::manual::Builder::new().compile(&[greeter_service]);
//}
